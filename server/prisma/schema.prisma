generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  events    Event[]
  users     User[]
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  fullName         String?
  phoneNumber      String?
  passwordHash     String?
  role             Role           @default(MEMBER)
  isActive         Boolean        @default(true)
  avatarUrl        String?
  provider         String?
  providerId       String?
  createdAt        DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime       @updatedAt @db.Timestamptz(6)
  organizationId   Int
  createdEvents    Event[]        @relation("UserCreatedEvents")
  receivedMessages Message[]      @relation("ReceivedMessages")
  sentMessages     Message[]      @relation("SentMessages")
  notifications    Notification[] @relation("UserNotifications")
  registrations    Registration[]
  organization     Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId], name: "provider_composite_id")
}

model Event {
  id                  Int            @id @default(autoincrement())
  title               String
  description         String?
  location            String?
  minAttendees        Int?
  maxAttendees        Int?
  startAt             DateTime?      @db.Timestamptz(6)
  endAt               DateTime?      @db.Timestamptz(6)
  registrationStartAt DateTime?      @db.Timestamptz(6)
  registrationEndAt   DateTime?      @db.Timestamptz(6)
  deposit             Decimal        @default(0.0)
  status              EventStatus    @default(DRAFT)
  createdAt           DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime       @updatedAt @db.Timestamptz(6)
  organizationId      Int
  createdById         Int
  attachments         Attachment[]
  createdBy           User           @relation("UserCreatedEvents", fields: [createdById], references: [id])
  organization        Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  registrations       Registration[]
}

model Registration {
  id          Int      @id @default(autoincrement())
  status      String   @default("REGISTERED")
  attendance  Boolean  @default(false)
  depositPaid Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  eventId     Int
  userId      Int
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
}

model Attachment {
  id        Int      @id @default(autoincrement())
  filename  String?
  url       String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Notification {
  id          Int              @id @default(autoincrement())
  title       String
  message     String
  type        NotificationType @default(GENERAL)
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now()) @db.Timestamptz(6)
  recipientId Int?
  recipient   User?            @relation("UserNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)
  senderId   Int
  receiverId Int?
  isRead     Boolean  @default(false)
  receiver   User?    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

model UserSession {
  sid    String   @id @map("sid")
  sess   Json     @map("sess")
  expire DateTime @map("expire") @db.Timestamptz(6)

  @@index([expire], map: "IDX_session_expire")
  @@map("user_sessions")
}

enum Role {
  ADMIN
  MEMBER
}

enum EventStatus {
  DRAFT
  REGISTRATION
  READY
  ONGOING
  COMPLETED
  CANCELLED
}

enum NotificationType {
  GENERAL
  EVENT
  SYSTEM
}

enum RegistrationStatus {
  REGISTERED
  CANCELLED
  ATTENDED
}
